<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApplicationMonitor</name>
    </assembly>
    <members>
        <member name="T:Monitoring.ApplicationMonitor.MonitorEvent">
             <summary>
             Instances of MonitorEvent are used to create application monitoring data. Application Monitoring
             data includes the machine name, application, request ID, method, status, and response time. The
             MonitorEvent object will determine the machine name and response time automatically. Response times
             are calculated using a high-resolution timer which starts when the object is intantiated and stops
             when the log() method is called.
             </summary>
             <example>
             <code>
             using System;
             using System.Threading;
             using Monitoring.ApplicationMonitor;
            
             namespace ApplicationMonitorTest
             {
                 class Program
                 {
                     int MyMethod(string requestId)
                     {
                         // Return status
                         int status = 1;
            
                         // Create a new MonitorEvent and start the timer
                         MonitorEvent evt = new MonitorEvent("MyApplication");
             
                         // Set the method name
                         evt.Method = "MyMethod";
             
                         // Set the request ID
                         evt.RequestId = requestId;
                         try
                         {
                             // Do work here
                             return status;
                         }
                         catch (Exception e)
                         {
                             // Set the exception status
                             status = 0;
                             return status;
                         }
                         finally
                         {
                             // Stop the timer and log the event
                             evt.Log(status);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Monitoring.ApplicationMonitor.MonitorEvent.#ctor(System.String)">
            <summary>
            Constructor for a MonitorEvent. Takes the application name and starts the event timer.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Monitoring.ApplicationMonitor.MonitorEvent.Log(System.String,System.String,System.Int32)">
            <summary>
            Stops the timer and logs the event given a request ID, method, and status.
            </summary>
            <param name="requestId"></param>
            <param name="method"></param>
            <param name="status"></param>
        </member>
        <member name="M:Monitoring.ApplicationMonitor.MonitorEvent.Log(System.String,System.Int32)">
            <summary>
            Stops the timer and logs the event given a method and status using the instance properties for all other values.
            </summary>
            <param name="method"></param>
            <param name="status"></param>
        </member>
        <member name="M:Monitoring.ApplicationMonitor.MonitorEvent.Log(System.Int32)">
            <summary>
            Stops the timer and logs the event given a status using the instance properties for all other values.
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:Monitoring.ApplicationMonitor.MonitorEvent.Log">
            <summary>
            Stops the timer using the instance properties for all values.
            </summary>
        </member>
        <member name="P:Monitoring.ApplicationMonitor.MonitorEvent.Application">
            <summary>
            Gets or sets the name of the application (required)
            </summary>
        </member>
        <member name="P:Monitoring.ApplicationMonitor.MonitorEvent.RequestId">
            <summary>
            Gets or sets the request ID (required)
            </summary>
        </member>
        <member name="P:Monitoring.ApplicationMonitor.MonitorEvent.Method">
            <summary>
            Gets or sets the method name (optional, defaults to "Unknown")
            </summary>
        </member>
        <member name="P:Monitoring.ApplicationMonitor.MonitorEvent.Status">
            <summary>
            Gets or sets the return status of the call (integer value, required)
            </summary>
        </member>
        <member name="T:Monitoring.ApplicationMonitor.SNMPAppender">
            <summary>
            Log4.net appender to append to SNMP Agent
            </summary>
        </member>
        <member name="M:Monitoring.ApplicationMonitor.SNMPAppender.RequestStop">
            <summary>
            Method to stop static worker thread
            </summary>
        </member>
        <member name="M:Monitoring.ApplicationMonitor.SNMPAppender.AddMethod(Monitoring.ApplicationMonitor.SNMPAppenderMethod)">
            <summary>
            Adds Method configured in config to a list
            </summary>
            <param name="method">method to add</param>
        </member>
        <member name="M:Monitoring.ApplicationMonitor.SNMPAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Logs monitor event to SNMP Agent
            </summary>
            <param name="loggingEvent">context event</param>
        </member>
        <member name="P:Monitoring.ApplicationMonitor.SNMPAppender.Agent">
            <summary>
            Specifies the SNMP agent name
            </summary>
        </member>
        <member name="P:Monitoring.ApplicationMonitor.SNMPAppender.Community">
            <summary>
             Specifies the SNMPv1 write community string
            </summary>
        </member>
        <member name="T:Monitoring.ApplicationMonitor.SNMPAppender.SNMPConfig">
            <summary>
            Class holding data to be sent to SNMP Handler
            </summary>
        </member>
        <member name="F:Monitoring.ApplicationMonitor.SNMPAppender.SNMPConfig.agent">
            <summary>
            member agent 
            </summary>
        </member>
        <member name="F:Monitoring.ApplicationMonitor.SNMPAppender.SNMPConfig.community">
            <summary>
            member community
            </summary>
        </member>
        <member name="M:Monitoring.ApplicationMonitor.SNMPAppender.SNMPConfig.#ctor(System.String,System.String)">
            <summary>
            Constructor initializes agent and config
            </summary>
            <param name="agent">agent Value</param>
            <param name="community">Community String</param>
        </member>
        <member name="T:Monitoring.ApplicationMonitor.SNMPAppenderMethod">
            <summary>
            Class to hold method structure corresponding to config file
            </summary>
        </member>
        <member name="M:Monitoring.ApplicationMonitor.SNMPAppenderMethod.#ctor">
            <summary>
            Default Constructor 
            </summary>
        </member>
        <member name="P:Monitoring.ApplicationMonitor.SNMPAppenderMethod.Name">
            <summary>
            Method Name
            </summary>
        </member>
        <member name="P:Monitoring.ApplicationMonitor.SNMPAppenderMethod.Status">
            <summary>
            Method Status
            </summary>
        </member>
        <member name="P:Monitoring.ApplicationMonitor.SNMPAppenderMethod.Oid">
            <summary>
            OID Corresponding to status of method
            </summary>
        </member>
    </members>
</doc>
